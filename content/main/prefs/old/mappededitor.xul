    <binding id="tree-mappededitor">
        <content orient="vertical" flex="1">
            <xul:hbox style="margin-right: 5px">
                <xul:spring flex="1"/>
                <xul:button class="list-item-add-icon button-toolbar-a"
                            anonid="addDir"
                            oncommand="document.getBindingParent(this).add()"
                            tooltiptext="&add.tooltiptext;"/>
                <xul:button class="list-item-remove-icon button-toolbar-a"
                            anonid="deleteDir"
                            oncommand="document.getBindingParent(this).delete()"
                            tooltiptext="&delete.tooltiptext;"/>
                <xul:button class="list-item-up-icon button-toolbar-a"
                            anonid="moveUpDir"
                            oncommand="document.getBindingParent(this).moveUp()"
                            tooltiptext="&moveUp.tooltiptext;"/>
                <xul:button class="list-item-down-icon button-toolbar-a"
                            anonid="moveDownDir"
                            oncommand="document.getBindingParent(this).moveDown()"
                            tooltiptext="&moveDown.tooltiptext;"/>
            </xul:hbox>
            <xul:tree anonid="mapping" flex="1"
                      onselect="document.getBindingParent(this).updateButtons();"
                      ondblclick="document.getBindingParent(this).edit();">
                <xul:treecols>
                    <xul:treecol id="name" label="&URI.label;" flex="1"/>
                    <xul:splitter class="tree-splitter"/>
                    <xul:treecol id="value" label="&mapsTo.label;" flex="1"/>
                </xul:treecols>
                <xul:treechildren flex="1" alternatingbackground="true" style="min-height: 100px">
                    <children/>
                </xul:treechildren>
            </xul:tree>
        </content>
        
        <handlers>
            <handler event="keypress">
                <![CDATA[
                    this.updateButtons();
                ]]>
            </handler>
        </handlers>
        <implementation>
            <property name="value"
                      onset="this.setData(val);"
                      onget="return this.getData();"/>

            <property name="tree"
                      onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'mapping');"/>
            <property name="treeView"
                      onget="return this.tree.view;"/>
            <property name="treeChildren"
                      onget="return this.tree.lastChild;"/>

            <method name="onpageload">
                <parameter name="prefwindow"/>
                <body>
                <![CDATA[
                try {
                    this.updateButtons();
                } catch (e) {
                    log.exception(e);
                }
                ]]>
                </body>
            </method>

            <method name="init">
                <parameter name="prefwindow"/>
                <body>
                <![CDATA[
                try {
                    this.updateButtons();
                } catch (e) {
                    log.exception(e);
                }
                ]]>
                </body>
            </method>

            <method name="setCwd">
                <parameter name="cwd"/>
                <body>
                    <![CDATA[
                        this.cwd = cwd;
                    ]]>
                </body>
            </method>

            <method name="getCellText">
                <parameter name="row"/>
                <parameter name="col"/>
                <body>
                    <![CDATA[
                        if (row >=0 && row < this.treeView.rowCount) {
                            var item = this.treeChildren.childNodes[row].firstChild;
                            return item.childNodes[col].getAttribute('label');
                        }
                        return null;
                    ]]>
                </body>
            </method>

            <method name="setCellText">
                <parameter name="row"/>
                <parameter name="col"/>
                <parameter name="text"/>
                <body>
                    <![CDATA[
                        if (row >=0 && row < this.treeView.rowCount) {
                            var item = this.treeChildren.childNodes[row].firstChild;
                            item.childNodes[col].setAttribute('label', text);
                        }
                    ]]>
                </body>
            </method>

            <method name="setData">
                <parameter name="encpathlist"/>
                <body>
                    <![CDATA[
                    try {
                        // empty the tree
                        while (this.treeChildren.firstChild) {
                            this.treeChildren.removeChild(this.treeChildren.firstChild);
                        }

                        if (!encpathlist) return;
                        var paths = encpathlist.split('::');
                        for (var i = 0; i < paths.length; i++) {
                            var data = paths[i].split('##');
                            if (data.length == 2)
                                this.addRow(data[0],data[1]);
                        }
                    } catch (e) {
                        log.exception(e);
                    }
                    ]]>
                </body>
            </method>

            <method name="getData">
                <body>
                    <![CDATA[
                        var os = Components.classes["@activestate.com/koOs;1"].getService(Components.interfaces.koIOs);
                        var paths = []
                        for (var i = 0; i < this.treeView.rowCount; i++) {
                            var uri = this.getCellText(i, 0);
                            var path = this.getCellText(i, 1);
                            paths.push(uri + '##' + path);
                        }
                        return paths.join('::');
                    ]]>
                </body>
            </method>

            <property name="prefstring"
                      onget="return this.getAttribute('prefstring');"/>
            <property name="value"
                      onset="this.setData(val);"
                      onget="return this.getData();"/>
            <method name="onpageload">
                <parameter name="prefwindow"/>
                <body> <![CDATA[
                    //dump("loading "+this.prefstring+"\n");
                ]]> </body>
            </method>
            <method name="saveprefs">
                <parameter name="prefwindow"/>
                <body> <![CDATA[
                    //dump("closing "+this.prefstring+"\n");
                    // should be nothing to do
                ]]> </body>
            </method>

            <method name="updateButtons">
                <body>
                    <![CDATA[
                    try {
                        var deleteDir = document.getAnonymousElementByAttribute(this, "anonid", 'deleteDir');
                        var moveUpDir = document.getAnonymousElementByAttribute(this, "anonid", 'moveUpDir');
                        var moveDownDir = document.getAnonymousElementByAttribute(this, "anonid", 'moveDownDir');
                        var selCount = this.treeView.selection.count;
                        var index = this.treeView.selection.currentIndex;
                        var selItem = null;
                        if (this.treeView.rowCount < 0) {
                            index = -1;
                            selCount = -1;
                        } else if (index < 0 || index >= this.treeView.rowCount) {
                            index = 0;
                        }
                        if (index >= 0) {
                            selItem = this.treeChildren.childNodes[index];
                        }
                        
                        if (selCount > 0) {
                            deleteDir.removeAttribute('disabled');
                        } else {
                            deleteDir.setAttribute('disabled', 'true');
                        }
                        if (selCount == 1 && selItem.nextSibling) {
                            moveDownDir.removeAttribute('disabled');
                        } else {
                            moveDownDir.setAttribute('disabled', 'true');
                        }
                        if (selCount == 1 && selItem.previousSibling) {
                            moveUpDir.removeAttribute('disabled');
                        } else {
                            moveUpDir.setAttribute('disabled', 'true');
                        }
                        if (this.getAttribute('oncommand')) {
                            eval(this.getAttribute('oncommand'));
                        }
                    } catch (e) {
                        log.exception(e);
                    }
                    ]]>
                </body>
            </method>
            <method name="addRow">
                <parameter name="uri"/>
                <parameter name="localpath"/>
                <body>
                    <![CDATA[
                        var item = document.createElement('treeitem');
                        var row = document.createElement('treerow');
                        var uriCell = document.createElement('treecell');
                        var pathCell = document.createElement('treecell');
                        uriCell.setAttribute('crop', 'center');
                        uriCell.setAttribute('label', uri);
                        row.appendChild(uriCell);
                        pathCell.setAttribute('crop', 'center');
                        pathCell.setAttribute('label', localpath);
                        row.appendChild(pathCell);
                        item.appendChild(row);
                        this.treeChildren.appendChild(item);
                        return item;
                    ]]>
                </body>
            </method>

            <method name="add">
                <body>
                    <![CDATA[
                    try {
                        var defaultDir = this.getCellText(this.treeView.selection.currentIndex, 1);
                        if (defaultDir) {
                            var os = Components.classes["@activestate.com/koOs;1"].getService(Components.interfaces.koIOs);
                            defaultDir = os.path.expanduser(defaultDir);
                            if (! os.path.isabs(defaultDir)) {
                                // Need to join with curdir
                                if (this.cwd) {
                                    defaultDir = os.path.join(this.cwd,
                                                              defaultDir);
                                } else {
                                    defaultDir = '';
                                }
                            }
                            defaultDir = os.path.normpath(defaultDir);
                        }
                        var info = {
                            uri: null,
                            path: defaultDir
                        };
                        window.openDialog('chrome://komodo/content/dialogs/editPathMap.xul', '_blank', 'chrome,modal,titlebar,resizable,centerscreen', info);
                        if (!info.uri || !info.path) return;
                        var item = this.addRow(info.uri,info.path);
                        // need to ensure element is visible otherwise
                        // new listitem doesn't show as selected when
                        // selected.
                        this.tree.treeBoxObject.ensureRowIsVisible(this.treeView.rowCount-1);
                        this.treeView.selection.select(this.treeView.rowCount-1);
                        this.updateButtons();
                    } catch (e) {
                        log.exception(e);
                    }
                    ]]>
                </body>
            </method>
            <method name="edit">
                <body>
                    <![CDATA[
                    try {
                        var info = {
                            uri: this.getCellText(this.treeView.selection.currentIndex, 0),
                            path: this.getCellText(this.treeView.selection.currentIndex, 1)
                        };
                        window.openDialog('chrome://komodo/content/dialogs/editPathMap.xul', '_blank', 'chrome,modal,titlebar,resizable,centerscreen', info);
                        if (!info.uri || !info.path) return;
                        this.setCellText(this.treeView.selection.currentIndex, 0, info.uri);
                        this.setCellText(this.treeView.selection.currentIndex, 1, info.path);
                    } catch (e) {
                        log.exception(e);
                    }
                    ]]>
                </body>
            </method>

            <method name="delete">
                <body>
                    <![CDATA[
                    try {
                        for (var i = this.treeView.rowCount; i >= 0; i--) {
                            if (this.treeView.selection.isSelected(i)) {
                                this.treeChildren.removeChild(this.treeChildren.childNodes[i]);
                            }
                        }
                        if (this.treeView.rowCount > 0) {
                            this.tree.treeBoxObject.ensureRowIsVisible(0);
                            this.treeView.selection.select(0);
                        }
                        this.updateButtons();
                    } catch (e) {
                        log.exception(e);
                    }
                    ]]>
                </body>
            </method>
            <method name="moveUp">
                <body>
                    <![CDATA[
                    try {
                        var si = this.treeView.selection.currentIndex;
                        var curItem = this.treeChildren.childNodes[si];
                        if (curItem.previousSibling) {
                            curItem.parentNode.insertBefore(curItem,
                                                        curItem.previousSibling);
                            this.treeView.selection.select(si-1);
                        }
                        this.updateButtons();
                    } catch (e) {
                        log.exception(e);
                    }
                    ]]>
                </body>
            </method>
            <method name="moveDown">
                <body>
                    <![CDATA[
                    try {
                        var si = this.treeView.selection.currentIndex;
                        var curItem = this.treeChildren.childNodes[si];
                        if (curItem.nextSibling && curItem.nextSibling.nextSibling) {
                            curItem.parentNode.insertBefore(curItem,
                                                        curItem.nextSibling.nextSibling);
                            this.treeView.selection.select(si+1);
                        } else {
                            curItem.parentNode.appendChild(curItem);
                            this.treeView.selection.select(this.treeView.rowCount-1);
                        }
                        this.updateButtons();
                    } catch (e) {
                        log.exception(e);
                    }
                    ]]>
                </body>
            </method>
        </implementation>

    </binding>
